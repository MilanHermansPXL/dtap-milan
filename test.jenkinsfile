pipeline {
    agent any
    tools {
        nodejs 'testenvnode'
    }
    stages {
        stage('cleanup') {
            steps {
                deleteDir()
            }
        }
        stage('Install dependencies') {
            steps {
                sh "npm install express"
            }
        }
        stage('fetch app code') {
            steps {
                git branch: 'main', url: 'https://github.com/PXL-2TIN-DevOps-Resources/calculator-app-finished.git'
            }
        }
        stage('Build artifact') {
            steps {
                sh 'docker build -t devops-pe/calculator-app:latest .'
            }
        }
        stage('Push Artifact') {
            steps {
                script {
                    echo 'Logging in to Docker Hub...'

                    withCredentials([usernamePassword(credentialsId: 'docker', usernameVariable: 'DOCKER_HUB_USERNAME', passwordVariable: 'DOCKER_HUB_PASSWORD')]) {
                        echo 'Logging into Docker Hub with provided credentials...'

                        // Zorg ervoor dat de omgevingsvariabelen beschikbaar zijn voor de Docker login opdracht
                        sh """
                            echo \$DOCKER_HUB_PASSWORD | docker login -u \$DOCKER_HUB_USERNAME --password-stdin
                        """
                    }

                    echo 'Tagging Docker image...'
                    // Gebruik de environment variable direct in de shell-opdracht
                    def imageTag = "${DOCKER_HUB_USERNAME}/calculator-app:latest"
                    echo "Tagging image with: ${imageTag}"

                    // Tag de Docker image
                    sh """
                        docker tag devops-pe/calculator-app:latest ${imageTag}
                    """

                    echo 'Pushing Docker image to Docker Hub...'
                    // Push de Docker image naar Docker Hub
                    sh """
                        docker push ${imageTag}
                    """
                }
            }
        }
    }
}
